@mixin hide-visually($toggle: 'hide') {
	@if not index('hide' 'unhide', $toggle) {
		@error '`#{$toggle}` is not a valid value for the `$toggle` argument in ' +
      'the `hide-visually` mixin. Must be either `hide` or `unhide`.';
	} @else if $toggle == 'hide' {
		border      : 0;
		// clip: rect(1px, 1px, 1px, 1px);
		clip        : rect(0, 0, 0, 0);
		clip-path   : inset(100%);
		height      : 1px;
		overflow    : hidden;
		padding     : 0;
		position    : absolute;
		white-space : nowrap;
		width       : 1px;
	} @else if $toggle == 'unhide' {
		clip        : auto;
		clip-path   : none;
		height      : auto;
		overflow    : visible;
		position    : static;
		white-space : inherit;
		width       : auto;
	}
}

@mixin min-width($size) {
	@media screen and (min-width : $size) {
		@content;
	}
}

@mixin set-state-color-properties($color,$properties...) {
	&:hover {
		@each $property in $properties {
			#{$property}: darken($color, 5%);
		}
	}
	&:focus {
		@each $property in $properties {
			#{$property}: darken($color, 10%);
		}
	}
	&:active {
		@each $property in $properties {
			#{$property}: darken($color, 15%);
		}
	}
}

$default-color-properties-to-change: background-color, border-color;

@mixin set-all-color-properties($color,$properties...) {
	@if($properties == default) {
		@each $property in $default-color-properties-to-change {
			#{$property}: $color;
		}
		&:hover {
			@each $property in $default-color-properties-to-change {
				#{$property}: darken($color, 5%);
			}
		}
		&:focus {
			@each $property in $default-color-properties-to-change {
				#{$property}: darken($color, 10%);
			}
		}
		&:active {
			@each $property in $default-color-properties-to-change {
				#{$property}: darken($color, 15%);
			}
		}
	}
	@else {
		@each $property in $properties {
			#{$property}: $color;
		}
		&:hover {
			@each $property in $properties {
				#{$property}: darken($color, 5%);
			}
		}
		&:focus {
			@each $property in $properties {
				#{$property}: darken($color, 10%);
			}
		}
		&:active {
			@each $property in $properties {
				#{$property}: darken($color, 15%);
			}
		}
	}
}

@mixin set-normal-color-properties($color,$properties...) {
	@if($properties == default) {
		@each $property in $default-color-properties-to-change {
			#{$property}: $color;
		}
	}
	@else {
		@each $property in $properties {
			#{$property}: $color;
		}
	}
}
